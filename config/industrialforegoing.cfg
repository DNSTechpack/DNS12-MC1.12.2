# Configuration file

machines {

    petrified_fuel_generator {
        # Time modifier for the burning time. (FuelBurningTime/%value%) [range: 1 ~ 2147483647, default: 20]
        I:timeModifier=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    enchantment_refiner {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    enchantment_extractor {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 5000]
        I:energyForWork=5000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 100]
        I:energyRate=100

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    enchantment_aplicator {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 5000]
        I:energyForWork=5000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 100]
        I:energyRate=100

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    mob_relocator {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 1000]
        I:energyForWork=1000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Mob essence multiplier based on the mob health. Essence mb = mobHealth*essenceMultiplier [range: 0.0 ~ 2.14748365E9, default: 1.0]
        S:essenceMultiplier=1.0

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    potion_enervator {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 5000]
        I:energyForWork=5000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    animal_independence_selector {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 20]
        I:energyRate=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    animal_stock_increaser {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 20]
        I:energyRate=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    crop_sower {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    crop_enrich_material_injector {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    crop_recolector {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # How much sludge is produced when the machine does an operation [range: 1 ~ 8000, default: 20]
        I:sludgeOperation=20

        # Amount of operations done when chopping a tree [range: 1 ~ 64, default: 10]
        I:treeOperations=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    black_hole_unit {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    water_condensator {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    water_resources_collector {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 5000]
        I:energyForWork=5000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 80]
        I:energyRate=80

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    animal_resource_harvester {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 20]
        I:energyRate=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    mob_slaughter_factory {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 1000]
        I:energyForWork=1000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Mob health multiplier, mobHealth * meatValue = meat mb produced [range: 1.0 ~ 2.14748365E9, default: 5.0]
        S:meatValue=5.0

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    mob_duplicator {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 5000]
        I:energyForWork=5000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 80]
        I:energyRate=80

        # Essence needed based on mob's health (mobHealth*essenceNeeded) [range: 1 ~ 2147483647, default: 12]
        I:essenceNeeded=12

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    block_destroyer {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 100]
        I:energyForWork=100

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 20]
        I:energyRate=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    block_placer {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 100]
        I:energyForWork=100

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 20]
        I:energyRate=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    tree_fluid_extractor {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    latex_processing_unit {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 200]
        I:energyForWork=200

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 5]
        I:energyRate=5

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    sewage_composter_solidifier {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 1000]
        I:energyForWork=1000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    animal_byproduct_recolector {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 40]
        I:energyForWork=40

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 2]
        I:energyRate=2

        # Max sludge produced in an operation [range: 1 ~ 2147483647, default: 150]
        I:maxSludgeOperation=150

        # Sewage produced by an adult animal [range: 1 ~ 2147483647, default: 15]
        I:sewageAdult=15

        # Sewage produced by a baby animal [range: 1 ~ 2147483647, default: 5]
        I:sewageBaby=5

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    sludge_refiner {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 200]
        I:energyForWork=200

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    mob_detector {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 100]
        I:energyForWork=100

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    lava_fabricator {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 200000]
        I:energyForWork=200000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 200000]
        I:energyRate=200000

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    bioreactor {
        # Base biofuel amount in mb [range: 1 ~ 4000, default: 80]
        I:baseBiofuel=80

        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 2000]
        I:energyForWork=2000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    biofuel_generator {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    laser_base {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 100000]
        I:energyForWork=100000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 100]
        I:energyRate=100

        # How much weight each lense increases to the ore [range: 1 ~ 2147483647, default: 5]
        I:lenseChanceIncrease=5

        # Machine can perform a work action [default: false]
        B:workDisabled=false

        # Amount of work needed to produce an ore [range: 1 ~ 2147483647, default: 100]
        I:workNeeded=100
    }

    laser_drill {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 3000]
        I:energyForWork=3000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 100]
        I:energyRate=100

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    ore_processor {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 1000]
        I:energyForWork=1000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Amount of essence needed for each fortune level. [range: 1 ~ 2147483647, default: 200]
        I:essenceFortune=200

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    black_hole_controller {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    dye_mixer {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 100]
        I:energyForWork=100

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    enchantment_invoker {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 4000]
        I:energyForWork=4000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 80]
        I:energyRate=80

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    spores_recreator {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    animal_growth_increaser {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 20]
        I:energyRate=20

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    material_stonework_factory {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 400]
        I:energyForWork=400

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 40]
        I:energyRate=40

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    black_hole_tank {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    resourceful_furnace {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 8000]
        I:energyForWork=8000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 80]
        I:energyRate=80

        # Essence multiplier for the furnace recipes. [range: 1 ~ 2147483647, default: 50]
        I:experienceMultiplier=50

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    villager_trade_exchanger {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 10000]
        I:energyForWork=10000

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 10]
        I:energyRate=10

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    energy_field_provider {
        # How much energy needs a machine to work [range: 1 ~ 2147483647, default: 1]
        I:energyForWork=1

        # Energy input rate of a machine [range: 1 ~ 2147483647, default: 1]
        I:energyRate=1

        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

    oredictionary_converter {
        # Machine can perform a work action [default: false]
        B:workDisabled=false
    }

}


